-- Non-Equi JOIN (비등가 JOIN)

-- #6201
SELECT c.C_NAME "고객명", c.C_POINT "POINT", g.G_NAME "상품명"
FROM T_CUSTOMER c , T_GIFT g
WHERE c.C_POINT BETWEEN g.G_START AND g.G_END 
; --ORACLE


SELECT c.C_NAME "고객명", c.C_POINT "POINT", g.G_NAME "상품명"
FROM T_CUSTOMER c 
	JOIN T_GIFT g
		ON c.C_POINT BETWEEN g.G_START AND g.G_END 
; --ANSI

-- #6202
SELECT g.G_NAME "상품명", COUNT(g.G_NAME ) "필요수량"
FROM T_CUSTOMER c , T_GIFT g
WHERE c.C_POINT BETWEEN g.G_START AND g.G_END 
GROUP BY g.G_NAME 
; --ORACLE

SELECT g.G_NAME "상품명", COUNT(g.G_NAME ) "필요수량"
FROM T_CUSTOMER c 
	JOIN T_GIFT g
		ON c.C_POINT BETWEEN g.G_START AND g.G_END 
GROUP BY g.G_NAME 
; --ANSI

-- #6203
SELECT  s.NAME "학생이름", x.TOTAL "점수", c.GRADE "학점"
FROM T_STUDENT s, T_EXAM01 x, T_CREDIT c
WHERE s.STUDNO = x.STUDNO AND x.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT 
ORDER BY x.TOTAL DESC 
; -- ORACLE

SELECT  s.NAME "학생이름", x.TOTAL "점수", c.GRADE "학점"
FROM T_STUDENT s 
		JOIN T_EXAM01 x ON s.STUDNO = x.STUDNO
		JOIN T_CREDIT c ON x.TOTAL BETWEEN c.MIN_POINT AND c.MAX_POINT 
ORDER BY x.TOTAL DESC 
; -- ANSI

-- #6204
SELECT c.C_NAME "고객명", c.C_POINT "POINT", g.G_NAME "상품명"
FROM T_CUSTOMER c, T_GIFT g
WHERE c.C_POINT >= g.G_START AND g.G_NAME = '산악용자전거'
; -- ORACLE

SELECT c.C_NAME "고객명", c.C_POINT "POINT", g.G_NAME "상품명"
FROM T_CUSTOMER c JOIN T_GIFT g
	ON c.C_POINT >= g.G_START AND g.G_NAME = '산악용자전거'
; -- ANSI

SELECT c.C_NAME "고객명", c.C_POINT "POINT", g.G_NAME "상품명"
FROM T_CUSTOMER c JOIN T_GIFT g ON c.C_POINT >= g.G_START
WHERE g.G_NAME = '산악용자전거'
; -- ORACLE


-- #6205
SELECT e.NAME "이름",
		(TO_CHAR(SYSDATE, 'YYYY') - TO_CHAR(e.BIRTHDAY, 'YYYY') + 1) "현재나이",
		NVL(e.POST, ' ') "현재직급",
		p.POST "예상직급"
FROM t_emp2 e, T_POST p 
WHERE (TO_CHAR(SYSDATE, 'YYYY') - TO_CHAR(e.BIRTHDAY, 'YYYY') + 1) BETWEEN p.S_AGE AND p.E_AGE 
; -- ORACLE

SELECT e.NAME "이름",
		(TO_CHAR(SYSDATE, 'YYYY') - TO_CHAR(e.BIRTHDAY, 'YYYY') + 1) "현재나이",
		NVL(e.POST, ' ') "현재직급",
		p.POST "예상직급"
FROM t_emp2 e JOIN T_POST p ON (TO_CHAR(SYSDATE, 'YYYY') - TO_CHAR(e.BIRTHDAY, 'YYYY') + 1) BETWEEN p.S_AGE AND p.E_AGE 
; -- ANSI


-- OUTER JOIN
-- (ANSI 구문 only)
-- #6206
SELECT s.NAME "학생이름", p.NAME "교수이름" 
FROM T_STUDENT s LEFT OUTER JOIN T_PROFESSOR p 
	ON s.PROFNO = p.PROFNO
;


SELECT s.NAME "학생이름", p.NAME "교수이름" 
FROM T_STUDENT s RIGHT OUTER JOIN T_PROFESSOR p 
	ON s.PROFNO = p.PROFNO
;

SELECT s.NAME "학생이름", p.NAME "교수이름" 
FROM T_STUDENT s FULL OUTER JOIN T_PROFESSOR p 
	ON s.PROFNO = p.PROFNO
;

----------------------------------------------------------- 
-- self join

-- #6209
-- ORACLE
SELECT d1.DNAME "부서명", d2.DNAME "상위부서명"
FROM T_DEPT2 d1, T_DEPT2 d2
WHERE d1.PDEPT = d2.PDEPT 
;
-- ANSI
SELECT d1.dname "부서명", d2.dname "상위부서명"
FROM t_dept2 d1 JOIN t_dept2 d2
	ON d1.pdept = d2.dcode;

-- #6210
SELECT p.PROFNO "교수번호", p.NAME "교수명", TO_CHAR(p.HIREDATE, 'YYYY-MM-DD') "입사일" , COUNT(p.HIREDATE < p2.HIREDATE) 
FROM T_PROFESSOR p LEFT OUTER JOIN T_PROFESSOR p2 ON p.HIREDATE > p2.HIREDATE 
GROUP BY p.HIREDATE < p2.HIREDATE
ORDER BY p.HIREDATE < p2.HIREDATE ASC;

SELECT p1.PROFNO "교수번호", p1.NAME "교수이름", TO_CHAR(p1.HIREDATE, 'YYYY-MM-DD') "입사일" , COUNT(p2.HIREDATE) "빠른사람" 
FROM T_PROFESSOR p1 LEFT OUTER JOIN T_PROFESSOR p2 ON p2.HIREDATE < p1.HIREDATE
GROUP BY p1.PROFNO , p1.NAME , TO_CHAR(p1.HIREDATE, 'YYYY-MM-DD')
ORDER BY 4, 1
;


